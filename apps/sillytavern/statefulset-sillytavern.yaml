---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  namespace: sillytavern
  name: sillytavern
  labels:
    app.kubernetes.io/name: sillytavern
    app.kubernetes.io/instance: sillytavern
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: sillytavern
      app.kubernetes.io/instance: sillytavern
  template:
    metadata:
      labels:
        app.kubernetes.io/name: sillytavern
        app.kubernetes.io/instance: sillytavern
    spec:
      containers:
        - name: sillytavern
          image: "ghcr.io/sillytavern/sillytavern:1.12.10@sha256:fd043493ec8b58811e1ebf6a5115b8fc2d079e9bd419e3d8428548127a81f43a"
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /robots.txt
              port: http
          readinessProbe:
            httpGet:
              path: /robots.txt
              port: http
          startupProbe:
            httpGet:
              path: /robots.txt
              port: http
            failureThreshold: 60
            periodSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - "CHOWN"  # It keeps trying to set owner on user files?
                - "CHMOD"
              drop:
                - "ALL"
            # The app expect to be able to write to directories that already have files on the container image.
            # For example: /home/node/app/access.log and /home/node/app/dist/lib.js
            readOnlyRootFilesystem: false
            # _AND_ those directories are only writable by root!
            runAsNonRoot: false
            seccompProfile:
              type: RuntimeDefault
          ports:
            - name: http
              containerPort: 8000
              protocol: TCP
          resources:
            requests:
              cpu: 50m
              memory: 100Mi
            limits:
              cpu: 1
              memory: 500Mi
          volumeMounts:
            - name: config
              mountPath: /home/node/app/config
            - name: data
              mountPath: /home/node/app/data
            - name: plugins
              mountPath: /home/node/app/plugins
            - name: extensions
              mountPath: /home/node/app/public/scripts/extensions/third-party
      volumes:
        - name: config
          configMap:
            name: config
        - name: data
          persistentVolumeClaim:
            claimName: data
        - name: plugins
          emptyDir: {}
        - name: extensions
          emptyDir: {}
      securityContext:
        # The app expects to be able to write to directories that already have files on the container image.
        # _AND_ those directories are only writable by root.
        # For example: /home/node/app and /home/node/app/dist
        runAsUser: 0
        runAsGroup: 1000  # node
        fsGroup: 0
